#!/usr/bin/env ruby
# Hulu Automuter
# by Daniel Choi <dhchoi@gmail.com>
# License: MIT License (c) 2011 Daniel Choi

port = 8123

pid_file = "#{ENV['HOME']}/hulu.pid"
File.open(pid_file, "w") {|f| f.puts Process.pid}


$stdout = File.open("#{ENV['HOME']}/hulu.log", 'a')

require 'webrick/httpproxy'


# This is to raises the max size of the request URI from 1024 t0 4096
module WEBrick
  class HTTPRequest
    # if RUBY_VERSION > '1.9.0'

    def read_request_line(socket)
      @request_line = read_line(socket, 2048) if socket
      if @request_line.bytesize >= 2048 and @request_line[-1, 1] != LF
        raise HTTPStatus::RequestURITooLarge
      end
      @request_time = Time.now
      raise HTTPStatus::EOFError unless @request_line
      if /^(\S+)\s+(\S++)(?:\s+HTTP\/(\d+\.\d+))?\r?\n/mo =~ @request_line
        @request_method = $1
        @unparsed_uri   = $2
        @http_version   = HTTPVersion.new($3 ? $3 : "0.9")
      else
        rl = @request_line.sub(/\x0d?\x0a\z/o, '')
        raise HTTPStatus::BadRequest, "bad Request-Line `#{rl}'."
      end
    end

  end
end

module HuluControl
  class OSX
    def initialize
      @last_volume = 70
    end

    def mute
      vol = `osascript -e "get output volume of (get volume settings)"`.strip.to_i
      if vol > 0
        @last_volume = vol
        puts "Remember last volume: #{@last_volume}"
      end
      %Q|osascript -e "set Volume output volume 0"|
    end

    def unmute
      %Q|osascript -e "set Volume output volume #{@last_volume}"|
    end
  end
end

hc = HuluControl::OSX.new

proxyproc = Proc.new{|req,res| 
  r = req.path
  next unless req.host =~ /hulu\.com/
  if r =~ /adload/ 
    $stdout.puts ["ad loaded", hc.mute].join(', ')
    `#{hc.mute}`
  elsif r =~ /contentplaybackresume/
    $stdout.puts ["content resuming", hc.unmute].join(', ')
    `#{hc.unmute}`
  end
  nil
}

#$stderr = File.open('/dev/null', 'w')
$stderr = File.open('/Users/choi/hulu2.log', 'a')

begin
  s = WEBrick::HTTPProxyServer.new(:Port => port, 
                                   :BindAddress => '0.0.0.0',
                                   :RequestCallback => proxyproc)
rescue 
  $stderr = STDERR
  raise
end
trap("SIGTERM"){s.shutdown}

puts "HuluAutomuter is starting on port #{port}"
puts "Please remember to configure your web browser to use this HTTP proxy"
puts "Press CTRL-C to stop"

s.start

puts "Done"

