#!/usr/bin/env ruby
# Hulu Automuter
# by Daniel Choi <dhchoi@gmail.com>
# License: MIT License (c) 2011 Daniel Choi

require 'webrick/httpproxy'

$stderr.puts "RUBY_VERSION: #{RUBY_VERSION}"
if RUBY_VERSION > "1.9.0"
  $stderr.puts "patching WEBrick::HTTPRequest"
  module WEBrick
    class HTTPRequest
      def read_request_line(socket)
        newsize = 2048 # orig 1024
        @request_line = read_line(socket, newsize) if socket
        if @request_line.bytesize >= newsize and @request_line[-1, 1] != LF
          raise HTTPStatus::RequestURITooLarge
        end
        @request_time = Time.now
        raise HTTPStatus::EOFError unless @request_line
        if /^(\S+)\s+(\S++)(?:\s+HTTP\/(\d+\.\d+))?\r?\n/mo =~ @request_line
          @request_method = $1
          @unparsed_uri   = $2
          @http_version   = HTTPVersion.new($3 ? $3 : "0.9")
        else
          rl = @request_line.sub(/\x0d?\x0a\z/o, '')
          raise HTTPStatus::BadRequest, "bad Request-Line `#{rl}'."
        end
      end
    end
  end
end

port = 8123

standalone_mode = false
if ARGV.first =~ /-/
  standalone_mode = true
end

if standalone_mode
  pid = Process.pid
  `ps aux | grep ruby | grep automuter-osx | awk '{print $2}' | grep -v #{pid} | xargs kill -INT`
end

module HuluControl
  class OSX
    def initialize
      @last_volume = 70
    end

    def mute
      vol = `osascript -e "get output volume of (get volume settings)"`.strip.to_i
      if vol > 0
        @last_volume = vol
        puts "Remember last volume: #{@last_volume}"
      end
      %Q|osascript -e "set Volume output volume 0"|
    end

    def unmute
      %Q|osascript -e "set Volume output volume #{@last_volume}"|
    end
  end
end
hc = HuluControl::OSX.new

proxyproc = Proc.new{|req,res| 
  if req.host !~ /hulu\.com/
    next
  end
  r = req.path
  if r =~ /adload/ 
    puts ["[ad loaded]", hc.mute].join(', ')
    `#{hc.mute}`
  elsif r =~ /contentplaybackresume/
    puts ["[content resuming]", hc.unmute].join(', ')
    `#{hc.unmute}`
  end
  nil
}


begin
  s = WEBrick::HTTPProxyServer.new(:Port => port, :BindAddress => '0.0.0.0', :RequestCallback => proxyproc)
rescue 
  $stderr = STDERR
  raise
end

def pac_path
  "file://localhost" + File.expand_path(File.dirname(__FILE__), 'automuter.pac')
end

def passthrough_pac_path
  "file://localhost" + File.expand_path(File.dirname(__FILE__), 'automuter_off.pac')
end

def run(cmd)
  puts cmd
  `#{cmd}`
end

def config_proxy
  run "networksetup -setautoproxyurl AirPort #{pac_path}"
  run "networksetup -setautoproxyurl Ethernet #{pac_path}"
end

def unconfig_proxy
  run "networksetup -setautoproxyurl AirPort #{passthrough_pac_path}"
  run "networksetup -setautoproxyurl Ethernet #{passthrough_pac_path}"
end


trap("INT"){
  s.shutdown
  if standalone_mode
    unconfig_proxy
  end
  exit
}

puts "HuluAutomuter is starting on port #{port} at #{Time.now}"
puts "Press CTRL-C to stop"

if standalone_mode
  puts "Running in standalone command-line mode"
  puts "Setting up http proxy"
  config_proxy
end
s.start

puts "Done"


__END__
# pac_path = File.expand_path(File.dirname(__FILE__), 'automuter.pac')
#`networksetup -setwebproxy AirPort 127.0.0.1 8123`
#`networksetup -setwebproxystate AirPort on`

